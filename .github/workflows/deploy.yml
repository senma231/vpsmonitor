name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'

jobs:
  # 部署Workers后端
  deploy-workers:
    name: Deploy Workers API
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'workers/package-lock.json'
          
      - name: Install Workers dependencies
        working-directory: ./workers
        run: npm ci
        
      - name: Lint Workers code
        working-directory: ./workers
        run: npm run lint
        
      - name: Deploy to Cloudflare Workers
        working-directory: ./workers
        run: npm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Run database migrations
        working-directory: ./workers
        run: npm run db:migrate
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 注意：Cloudflare Pages 建议通过Git集成自动部署
  # 这个job仅作为备用方案，正常情况下Pages会自动部署
  deploy-pages-backup:
    name: Deploy Frontend to Pages (Backup)
    runs-on: ubuntu-latest
    if: false  # 默认禁用，使用Git集成

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_WS_URL: ${{ secrets.VITE_WS_URL }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: vps-monitor
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
  # 设置Cloudflare Workers密钥
  setup-secrets:
    name: Setup Workers Secrets
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: deploy-workers
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Set AUTH_SECRET
        working-directory: ./workers
        run: echo "${{ secrets.AUTH_SECRET }}" | wrangler secret put AUTH_SECRET
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Set ENCRYPTION_KEY
        working-directory: ./workers
        run: echo "${{ secrets.ENCRYPTION_KEY }}" | wrangler secret put ENCRYPTION_KEY
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Set ADMIN_PASSWORD
        working-directory: ./workers
        run: echo "${{ secrets.ADMIN_PASSWORD }}" | wrangler secret put ADMIN_PASSWORD
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 健康检查
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-workers, deploy-pages]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment
        run: sleep 30
        
      - name: Check Workers API health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.VITE_API_URL }}/health)
          if [ $response -eq 200 ]; then
            echo "✅ Workers API is healthy"
          else
            echo "❌ Workers API health check failed (HTTP $response)"
            exit 1
          fi
          
      - name: Check Pages deployment
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://vps-monitor.pages.dev)
          if [ $response -eq 200 ]; then
            echo "✅ Pages deployment is healthy"
          else
            echo "❌ Pages deployment health check failed (HTTP $response)"
            exit 1
          fi

  # 通知部署结果
  notify:
    name: Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [deploy-workers, deploy-pages, health-check]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify success
        if: needs.deploy-workers.result == 'success' && needs.deploy-pages.result == 'success' && needs.health-check.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "Workers API: ${{ secrets.VITE_API_URL }}"
          echo "Frontend: https://vps-monitor.pages.dev"
          
      - name: Notify failure
        if: needs.deploy-workers.result == 'failure' || needs.deploy-pages.result == 'failure' || needs.health-check.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Workers: ${{ needs.deploy-workers.result }}"
          echo "Pages: ${{ needs.deploy-pages.result }}"
          echo "Health Check: ${{ needs.health-check.result }}"
          exit 1
